package blah

// // Package frame_io provides primitives to interact the openapi HTTP API.
// //
// // Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
// package frame_io

// import (
// 	"time"

// 	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
// )

// const (
// 	UserTokenAuthScopes = "UserTokenAuth.Scopes"
// 	JWTAuthScopes       = "JWTAuth.Scopes"
// 	OAuthScopes         = "OAuth.Scopes"
// )

// // Account defines model for Account.
// type Account struct {
// 	AccountDefaultColor   *string          `json:"account_default_color,omitempty"`
// 	AccountMembers        *[]AccountMember `json:"account_members,omitempty"`
// 	ArchivedStorage       *int             `json:"archived_storage,omitempty"`
// 	BillingEmails         *string          `json:"billing_emails,omitempty"`
// 	City                  *string          `json:"city,omitempty"`
// 	CollaboratorCount     *int             `json:"collaborator_count,omitempty"`
// 	CollaboratorRoleCount *int             `json:"collaborator_role_count,omitempty"`
// 	CompanyAddress        *string          `json:"company_address,omitempty"`
// 	CompanyName           *string          `json:"company_name,omitempty"`
// 	Country               *string          `json:"country,omitempty"`
// 	DeletedAt             *time.Time       `json:"deleted_at,omitempty"`
// 	DelinquentAt          *time.Time       `json:"delinquent_at,omitempty"`
// 	DisplayName           *string          `json:"display_name,omitempty"`
// 	Duration              *int             `json:"duration,omitempty"`
// 	FileCount             *int             `json:"file_count,omitempty"`
// 	FolderCount           *int             `json:"folder_count,omitempty"`
// 	Frames                *int             `json:"frames,omitempty"`
// 	Id                    *string          `json:"id,omitempty"`
// 	Image                 *string          `json:"image,omitempty"`
// 	Image128              *string          `json:"image_128,omitempty"`
// 	Image256              *string          `json:"image_256,omitempty"`
// 	Image32               *string          `json:"image_32,omitempty"`
// 	Image64               *string          `json:"image_64,omitempty"`
// 	InsertedAt            *time.Time       `json:"inserted_at,omitempty"`
// 	InvoiceEmails         *[]string        `json:"invoice_emails,omitempty"`
// 	LifetimeFileCount     *int             `json:"lifetime_file_count,omitempty"`
// 	Line1                 *string          `json:"line1,omitempty"`
// 	LockedAt              *time.Time       `json:"locked_at,omitempty"`
// 	MemberCount           *int             `json:"member_count,omitempty"`
// 	Owner                 *User            `json:"owner,omitempty"`
// 	OwnerId               *string          `json:"owner_id,omitempty"`
// 	Plan                  *Plan            `json:"plan,omitempty"`
// 	PostalCode            *string          `json:"postal_code,omitempty"`
// 	ProjectCount          *int             `json:"project_count,omitempty"`
// 	State                 *string          `json:"state,omitempty"`
// 	Storage               *int             `json:"storage,omitempty"`
// 	Subscription          *Subscription    `json:"subscription,omitempty"`
// 	TeamCount             *int             `json:"team_count,omitempty"`
// 	Teams                 *[]Team          `json:"teams,omitempty"`
// 	UnpaidAt              *time.Time       `json:"unpaid_at,omitempty"`
// 	UpdatedAt             *time.Time       `json:"updated_at,omitempty"`
// 	UploadUrl             *string          `json:"upload_url,omitempty"`
// 	UserCount             *int             `json:"user_count,omitempty"`
// 	Vat                   *string          `json:"vat,omitempty"`
// 	Watermark             *Watermark       `json:"watermark,omitempty"`
// }

// // AccountMember defines model for AccountMember.
// type AccountMember struct {
// 	AcceptedAt *time.Time `json:"accepted_at,omitempty"`
// 	AccountId  *string    `json:"account_id,omitempty"`
// 	DeclinedAt *time.Time `json:"declined_at,omitempty"`
// 	DeletedAt  *time.Time `json:"deleted_at,omitempty"`
// 	InsertedAt *time.Time `json:"inserted_at,omitempty"`
// 	Role       *string    `json:"role,omitempty"`
// 	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
// 	UserId     *string    `json:"user_id,omitempty"`
// }

// // AccountMembership defines model for AccountMembership.
// type AccountMembership struct {
// 	Account  *string `json:"account,omitempty"`
// 	Reviewer *bool   `json:"reviewer,omitempty"`
// 	Team     *string `json:"team,omitempty"`
// }

// // Action defines model for Action.
// type Action struct {
// 	Active             *bool      `json:"active,omitempty"`
// 	AllowCollaborators *bool      `json:"allow_collaborators,omitempty"`
// 	CreatorId          *string    `json:"creator_id,omitempty"`
// 	DeletedAt          *time.Time `json:"deleted_at,omitempty"`
// 	Description        *string    `json:"description,omitempty"`
// 	Event              *string    `json:"event,omitempty"`
// 	Id                 *string    `json:"id,omitempty"`
// 	Image              *string    `json:"image,omitempty"`
// 	InsertedAt         *time.Time `json:"inserted_at,omitempty"`
// 	Name               *string    `json:"name,omitempty"`
// 	Team               *Team      `json:"team,omitempty"`
// 	TeamId             *string    `json:"team_id,omitempty"`
// 	UpdatedAt          *time.Time `json:"updated_at,omitempty"`
// 	UploadUrl          *string    `json:"upload_url,omitempty"`
// 	Url                *string    `json:"url,omitempty"`
// 	Webhook            *Webhook   `json:"webhook,omitempty"`
// }

// // AdminOnlyAction defines model for AdminOnlyAction.
// type AdminOnlyAction struct {
// 	Lifecycle *bool `json:"lifecycle,omitempty"`
// }

// // AnonymousUser defines model for AnonymousUser.
// type AnonymousUser struct {
// 	DeletedAt               *time.Time          `json:"deleted_at,omitempty"`
// 	Email                   *string             `json:"email,omitempty"`
// 	Id                      *string             `json:"id,omitempty"`
// 	InsertedAt              *time.Time          `json:"inserted_at,omitempty"`
// 	Name                    *string             `json:"name,omitempty"`
// 	NotificationPreferences *ProjectPreferences `json:"notification_preferences,omitempty"`
// 	UpdatedAt               *time.Time          `json:"updated_at,omitempty"`
// 	UserDefaultColor        *string             `json:"user_default_color,omitempty"`
// }

// // Asset defines model for Asset.
// type Asset struct {
// 	AccountId            *string                 `json:"account_id,omitempty"`
// 	ArchiveFrom          *string                 `json:"archive_from,omitempty"`
// 	AssetType            *string                 `json:"asset_type,omitempty"`
// 	Bundle               *bool                   `json:"bundle,omitempty"`
// 	BundleView           *string                 `json:"bundle_view,omitempty"`
// 	CoverAssetId         *string                 `json:"cover_asset_id,omitempty"`
// 	Creator              *User                   `json:"creator,omitempty"`
// 	Frames               *int                    `json:"frames,omitempty"`
// 	HardDeletedAt        *time.Time              `json:"hard_deleted_at,omitempty"`
// 	Id                   *string                 `json:"id,omitempty"`
// 	Index                *float32                `json:"index,omitempty"`
// 	IsBundleChild        *bool                   `json:"is_bundle_child,omitempty"`
// 	IsHlsRequired        *bool                   `json:"is_hls_required,omitempty"`
// 	IsSessionWatermarked *bool                   `json:"is_session_watermarked,omitempty"`
// 	ItemCount            *int                    `json:"item_count,omitempty"`
// 	Label                *string                 `json:"label,omitempty"`
// 	Metadata             *map[string]interface{} `json:"metadata,omitempty"`
// 	MetadataFlags        *MetadataFlags          `json:"metadata_flags,omitempty"`
// 	Name                 *string                 `json:"name,omitempty"`
// 	Original             *string                 `json:"original,omitempty"`
// 	ProjectId            *string                 `json:"project_id,omitempty"`
// 	Properties           *map[string]interface{} `json:"properties,omitempty"`
// 	RequiredTranscodes   *RequiredTranscodes     `json:"required_transcodes,omitempty"`
// 	TeamId               *string                 `json:"team_id,omitempty"`
// 	Type                 *string                 `json:"type,omitempty"`
// 	UserPermissions      *UserPermissions        `json:"user_permissions,omitempty"`
// 	ViewCount            *int                    `json:"view_count,omitempty"`
// }

// // AssetAudio defines model for AssetAudio.
// type AssetAudio struct {
// 	Type        *string   `json:"_type,omitempty"`
// 	AudioTracks *[]string `json:"audio_tracks,omitempty"`
// 	Id          *string   `json:"id,omitempty"`
// }

// // AssetSearch defines model for AssetSearch.
// type AssetSearch struct {
// 	AccountId *string `json:"account_id,omitempty"`

// 	// Custom fields to filter records on (currently only for assets)
// 	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

// 	// Custom ES filters to apply to your query
// 	Filter  *map[string]interface{} `json:"filter,omitempty"`
// 	Include *string                 `json:"include,omitempty"`

// 	// Flag to include soft-deleted records in results
// 	IncludeDeleted *bool `json:"include_deleted,omitempty"`

// 	// Additional request options
// 	Opts *map[string]interface{} `json:"opts,omitempty"`

// 	// The page to retrieve
// 	Page *int `json:"page,omitempty"`

// 	// The number of results to include in the page
// 	PageSize   *int                    `json:"page_size,omitempty"`
// 	ProjectId  *string                 `json:"project_id,omitempty"`
// 	Properties *map[string]interface{} `json:"properties,omitempty"`

// 	// Search text
// 	Q *string `json:"q,omitempty"`

// 	// Search text
// 	Query          *string `json:"query,omitempty"`
// 	SharedProjects *bool   `json:"shared_projects,omitempty"`

// 	// Sorting parameters
// 	Sort   *string      `json:"sort,omitempty"`
// 	TeamId *interface{} `json:"team_id,omitempty"`
// 	Type   *string      `json:"type,omitempty"`
// }

// // AssetSource defines model for AssetSource.
// type AssetSource struct {
// 	Url *string `json:"url,omitempty"`
// }

// // AssetSubtitle defines model for AssetSubtitle.
// type AssetSubtitle struct {
// 	Type           *string   `json:"_type,omitempty"`
// 	Id             *string   `json:"id,omitempty"`
// 	SubtitleTracks *[]string `json:"subtitle_tracks,omitempty"`
// }

// // Audit defines model for Audit.
// type Audit struct {
// 	AccountId     *string                 `json:"account_id,omitempty"`
// 	Action        *string                 `json:"action,omitempty"`
// 	Actor         *interface{}            `json:"actor,omitempty"`
// 	ActorId       *string                 `json:"actor_id,omitempty"`
// 	ApplicationId *string                 `json:"application_id,omitempty"`
// 	InsertedAt    *time.Time              `json:"inserted_at,omitempty"`
// 	IpAddress     *string                 `json:"ip_address,omitempty"`
// 	ItemId        *string                 `json:"item_id,omitempty"`
// 	ItemType      *string                 `json:"item_type,omitempty"`
// 	RequestId     *string                 `json:"request_id,omitempty"`
// 	Resource      *map[string]interface{} `json:"resource,omitempty"`
// 	TeamId        *string                 `json:"team_id,omitempty"`
// 	UpdatedAt     *time.Time              `json:"updated_at,omitempty"`
// }

// // AvailableFeatures defines model for AvailableFeatures.
// type AvailableFeatures struct {
// 	ArchivalStorage            *bool `json:"archival_storage,omitempty"`
// 	CustomBrandedEmails        *bool `json:"custom_branded_emails,omitempty"`
// 	CustomBrandedPresentations *bool `json:"custom_branded_presentations,omitempty"`
// 	ReelPlayer                 *bool `json:"reel_player,omitempty"`
// 	SecureSharing              *bool `json:"secure_sharing,omitempty"`
// 	SessionBasedWatermarking   *bool `json:"session_based_watermarking,omitempty"`
// 	TeamOnlyComments           *bool `json:"team_only_comments,omitempty"`
// }

// // BatchInviteParams defines model for BatchInviteParams.
// type BatchInviteParams struct {
// 	Batch *[]struct {

// 		// Create an invite for the given email
// 		Email *string `json:"email,omitempty"`

// 		// Invite message to be used for this one bath op
// 		Message *string `json:"message,omitempty"`

// 		// Create a set of invites for all approved team members within the given team
// 		TeamId *string `json:"team_id,omitempty"`

// 		// Create a set of invites for all the users within the given user group
// 		UserGroupId *string `json:"user_group_id,omitempty"`

// 		// Create an invite for the given user_id
// 		UserId *string `json:"user_id,omitempty"`
// 	} `json:"batch,omitempty"`

// 	// Default invite message to be applied to all invites created
// 	DefaultMessage *string `json:"default_message,omitempty"`

// 	// When false no emails will be sent to the new Reviewers and Pending Reviewers
// 	SendEmail *bool `json:"send_email,omitempty"`
// }

// // Collaborator defines model for Collaborator.
// type Collaborator struct {
// 	Type      *string `json:"_type,omitempty"`
// 	Email     *string `json:"email,omitempty"`
// 	ProjectId *string `json:"project_id,omitempty"`
// 	User      *User   `json:"user,omitempty"`
// 	UserId    *string `json:"user_id,omitempty"`
// }

// // Comment defines model for Comment.
// type Comment struct {
// 	Annotation  *string `json:"annotation,omitempty"`
// 	Completed   *bool   `json:"completed,omitempty"`
// 	CompletedAt *string `json:"completed_at,omitempty"`
// 	CompleterId *string `json:"completer_id,omitempty"`
// 	HasReplies  *bool   `json:"has_replies,omitempty"`
// 	Id          *string `json:"id,omitempty"`
// 	LikeCount   *int    `json:"like_count,omitempty"`
// 	Owner       *User   `json:"owner,omitempty"`
// 	OwnerId     *string `json:"owner_id,omitempty"`
// 	Text        *string `json:"text,omitempty"`
// 	Timestamp   *int    `json:"timestamp,omitempty"`
// }

// // CommentImpression defines model for CommentImpression.
// type CommentImpression struct {
// 	AssetId      *string `json:"asset_id,omitempty"`
// 	Count        *int    `json:"count,omitempty"`
// 	DeletedAt    *string `json:"deleted_at,omitempty"`
// 	Id           *string `json:"id,omitempty"`
// 	InsertedAt   *string `json:"inserted_at,omitempty"`
// 	ReviewLinkId *string `json:"review_link_id,omitempty"`
// 	Type         *string `json:"type,omitempty"`
// 	UpdatedAt    *string `json:"updated_at,omitempty"`
// 	User         *User   `json:"user,omitempty"`
// 	UserId       *string `json:"user_id,omitempty"`
// }

// // EmailBranding defines model for EmailBranding.
// type EmailBranding struct {
// 	AccentColor     *string `json:"accent_color,omitempty"`
// 	BackgroundColor *string `json:"background_color,omitempty"`
// 	Image           *Image  `json:"image,omitempty"`
// }

// // Events defines model for Events.
// type Events string

// // List of Events
// const (
// 	Events_action_executed      Events = "action.executed"
// 	Events_asset_copied         Events = "asset.copied"
// 	Events_asset_created        Events = "asset.created"
// 	Events_asset_deleted        Events = "asset.deleted"
// 	Events_asset_label_updated  Events = "asset.label.updated"
// 	Events_asset_ready          Events = "asset.ready"
// 	Events_asset_updated        Events = "asset.updated"
// 	Events_asset_versioned      Events = "asset.versioned"
// 	Events_collaborator_created Events = "collaborator.created"
// 	Events_collaborator_deleted Events = "collaborator.deleted"
// 	Events_comment_completed    Events = "comment.completed"
// 	Events_comment_created      Events = "comment.created"
// 	Events_comment_deleted      Events = "comment.deleted"
// 	Events_comment_uncompleted  Events = "comment.uncompleted"
// 	Events_comment_updated      Events = "comment.updated"
// 	Events_interaction_executed Events = "interaction.executed"
// 	Events_project_created      Events = "project.created"
// 	Events_project_deleted      Events = "project.deleted"
// 	Events_project_updated      Events = "project.updated"
// 	Events_reviewlink_created   Events = "reviewlink.created"
// 	Events_teammember_created   Events = "teammember.created"
// 	Events_teammember_deleted   Events = "teammember.deleted"
// )

// // HTTPError defines model for HTTPError.
// type HTTPError struct {
// 	Code   *int `json:"code,omitempty"`
// 	Errors *[]struct {
// 		Code   *int    `json:"code,omitempty"`
// 		Detail *string `json:"detail,omitempty"`
// 		Status *int    `json:"status,omitempty"`
// 		Title  *string `json:"title,omitempty"`
// 	} `json:"errors,omitempty"`
// 	Message *string `json:"message,omitempty"`
// }

// // Image defines model for Image.
// type Image struct {
// 	Bucket   *string `json:"bucket,omitempty"`
// 	Key      *string `json:"key,omitempty"`
// 	Type     *string `json:"type,omitempty"`
// 	Uploaded *bool   `json:"uploaded,omitempty"`
// }

// // Installation defines model for Installation.
// type Installation struct {
// 	AccountId   *string    `json:"account_id,omitempty"`
// 	AppId       *string    `json:"app_id,omitempty"`
// 	AppVersion  *int       `json:"app_version,omitempty"`
// 	BotUserId   *string    `json:"bot_user_id,omitempty"`
// 	DeletedAt   *time.Time `json:"deleted_at,omitempty"`
// 	Id          *string    `json:"id,omitempty"`
// 	InstalledAt *time.Time `json:"installed_at,omitempty"`
// }

// // LibrarySearch defines model for LibrarySearch.
// type LibrarySearch struct {
// 	AccountId *string `json:"account_id,omitempty"`

// 	// Custom fields to filter records on (currently only for assets)
// 	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

// 	// Custom ES filters to apply to your query
// 	Filter *map[string]interface{} `json:"filter,omitempty"`

// 	// Flag to include soft-deleted records in results
// 	IncludeDeleted *bool `json:"include_deleted,omitempty"`

// 	// Additional request options
// 	Opts *map[string]interface{} `json:"opts,omitempty"`

// 	// The page to retrieve
// 	Page *int `json:"page,omitempty"`

// 	// The number of results to include in the page
// 	PageSize *int `json:"page_size,omitempty"`

// 	// Search text
// 	Q *string `json:"q,omitempty"`

// 	// Search text
// 	Query *string `json:"query,omitempty"`

// 	// Sorting parameters
// 	Sort *string `json:"sort,omitempty"`
// }

// // MetadataFlags defines model for MetadataFlags.
// type MetadataFlags struct {
// 	Id                         *string `json:"id,omitempty"`
// 	Is360                      *bool   `json:"is_360,omitempty"`
// 	IsHdr                      *bool   `json:"is_hdr,omitempty"`
// 	IsOriginalPlayerCompatible *bool   `json:"is_original_player_compatible,omitempty"`
// }

// // Plan defines model for Plan.
// type Plan struct {
// 	ArchivedStorageLimit *int               `json:"archived_storage_limit,omitempty"`
// 	Autoscaling          *bool              `json:"autoscaling,omitempty"`
// 	AvailableFeatures    *AvailableFeatures `json:"available_features,omitempty"`
// 	CollaboratorLimit    *int               `json:"collaborator_limit,omitempty"`
// 	Cost                 *int               `json:"cost,omitempty"`
// 	DefaultPlan          *bool              `json:"default_plan,omitempty"`
// 	DeletedAt            *time.Time         `json:"deleted_at,omitempty"`
// 	Enterprise           *bool              `json:"enterprise,omitempty"`
// 	FileLimit            *int               `json:"file_limit,omitempty"`
// 	Id                   *string            `json:"id,omitempty"`
// 	InsertedAt           *time.Time         `json:"inserted_at,omitempty"`
// 	LifetimeFileLimit    *int               `json:"lifetime_file_limit,omitempty"`
// 	MemberLimit          *int               `json:"member_limit,omitempty"`
// 	Name                 *string            `json:"name,omitempty"`
// 	PaymentMethod        *string            `json:"payment_method,omitempty"`
// 	Period               *string            `json:"period,omitempty"`
// 	ProjectLimit         *int               `json:"project_limit,omitempty"`
// 	StorageLimit         *int               `json:"storage_limit,omitempty"`
// 	TeamLimit            *int               `json:"team_limit,omitempty"`
// 	Tier                 *string            `json:"tier,omitempty"`
// 	Title                *string            `json:"title,omitempty"`
// 	UpdatedAt            *time.Time         `json:"updated_at,omitempty"`
// 	UserLimit            *int               `json:"user_limit,omitempty"`
// 	UserMax              *int               `json:"user_max,omitempty"`
// 	Version              *int               `json:"version,omitempty"`
// }

// // Presentation defines model for Presentation.
// type Presentation struct {
// 	AccessControl     *ShareableEntityAccessControl `json:"access_control,omitempty"`
// 	Asset             *Asset                        `json:"asset,omitempty"`
// 	AssetId           *string                       `json:"asset_id,omitempty"`
// 	Assets            *[]Asset                      `json:"assets,omitempty"`
// 	Autoplay          *bool                         `json:"autoplay,omitempty"`
// 	AvailableFeatures *map[string]interface{}       `json:"available_features,omitempty"`
// 	BackgroundColor   *string                       `json:"background_color,omitempty"`
// 	CanDownload       *bool                         `json:"can_download,omitempty"`
// 	Color             *string                       `json:"color,omitempty"`
// 	DeletedAt         *time.Time                    `json:"deleted_at,omitempty"`
// 	Description       *string                       `json:"description,omitempty"`
// 	Enabled           *bool                         `json:"enabled,omitempty"`
// 	ExpiresAt         *time.Time                    `json:"expires_at,omitempty"`
// 	Format            *string                       `json:"format,omitempty"`
// 	Id                *string                       `json:"id,omitempty"`
// 	IncludeExt        *bool                         `json:"include_ext,omitempty"`
// 	IncludeUploadDate *bool                         `json:"include_upload_date,omitempty"`
// 	InsertedAt        *time.Time                    `json:"inserted_at,omitempty"`
// 	Layout            *string                       `json:"layout,omitempty"`
// 	Name              *string                       `json:"name,omitempty"`
// 	OwnerId           *string                       `json:"owner_id,omitempty"`
// 	Password          *string                       `json:"password,omitempty"`
// 	PresentationItems *[]PresentationItem           `json:"presentation_items,omitempty"`
// 	Project           *Project                      `json:"project,omitempty"`
// 	ProjectId         *string                       `json:"project_id,omitempty"`
// 	ReviewerCount     *int                          `json:"reviewer_count,omitempty"`
// 	Secure            *bool                         `json:"secure,omitempty"`
// 	ShortUrl          *string                       `json:"short_url,omitempty"`
// 	Style             *string                       `json:"style,omitempty"`
// 	Team              *Team                         `json:"team,omitempty"`
// 	TextColor         *string                       `json:"text_color,omitempty"`
// 	Title             *string                       `json:"title,omitempty"`
// 	UpdatedAt         *time.Time                    `json:"updated_at,omitempty"`
// 	Vanity            *string                       `json:"vanity,omitempty"`
// 	ViewCount         *int                          `json:"view_count,omitempty"`
// }

// // PresentationItem defines model for PresentationItem.
// type PresentationItem struct {
// 	Asset        *Asset        `json:"asset,omitempty"`
// 	Id           *string       `json:"id,omitempty"`
// 	Index        *int          `json:"index,omitempty"`
// 	InsertedAt   *time.Time    `json:"inserted_at,omitempty"`
// 	Presentation *Presentation `json:"presentation,omitempty"`
// 	UpdatedAt    *time.Time    `json:"updated_at,omitempty"`
// }

// // Project defines model for Project.
// type Project struct {
// 	ArchiveStatus      *string             `json:"archive_status,omitempty"`
// 	ArchivedAt         *time.Time          `json:"archived_at,omitempty"`
// 	ArchivedFileCount  *int                `json:"archived_file_count,omitempty"`
// 	ArchivedStorage    *int                `json:"archived_storage,omitempty"`
// 	CollaboratorCount  *int                `json:"collaborator_count,omitempty"`
// 	Collaborators      *[]Collaborator     `json:"collaborators,omitempty"`
// 	DeletedAt          *time.Time          `json:"deleted_at,omitempty"`
// 	Description        *string             `json:"description,omitempty"`
// 	FileCount          *int                `json:"file_count,omitempty"`
// 	FolderCount        *int                `json:"folder_count,omitempty"`
// 	Id                 *string             `json:"id,omitempty"`
// 	IgnoreArchive      *bool               `json:"ignore_archive,omitempty"`
// 	InsertedAt         *time.Time          `json:"inserted_at,omitempty"`
// 	InviteUrl          *string             `json:"invite_url,omitempty"`
// 	Name               *string             `json:"name,omitempty"`
// 	OwnerId            *string             `json:"owner_id,omitempty"`
// 	Private            *bool               `json:"private,omitempty"`
// 	ProjectPreferences *ProjectPreferences `json:"project_preferences,omitempty"`
// 	ReadOnly           *bool               `json:"read_only,omitempty"`
// 	RootAsset          *Asset              `json:"root_asset,omitempty"`
// 	RootAssetId        *string             `json:"root_asset_id,omitempty"`
// 	Shared             *bool               `json:"shared,omitempty"`
// 	Storage            *int                `json:"storage,omitempty"`
// 	Team               *Team               `json:"team,omitempty"`
// 	TeamId             *string             `json:"team_id,omitempty"`
// 	UpdatedAt          *time.Time          `json:"updated_at,omitempty"`
// 	UserPermissions    *UserPermissions    `json:"user_permissions,omitempty"`
// 	UserPreferences    *ProjectPreferences `json:"user_preferences,omitempty"`
// 	Watermark          *Watermark          `json:"watermark,omitempty"`
// }

// // ProjectMembership defines model for ProjectMembership.
// type ProjectMembership struct {
// 	Collaborator *bool   `json:"collaborator,omitempty"`
// 	Owner        *bool   `json:"owner,omitempty"`
// 	TeamMember   *bool   `json:"team_member,omitempty"`
// 	TeamRole     *string `json:"team_role,omitempty"`
// }

// // ProjectPreferences defines model for ProjectPreferences.
// type ProjectPreferences struct {
// 	CollaboratorCanDownload *bool `json:"collaborator_can_download,omitempty"`
// 	CollaboratorCanInvite   *bool `json:"collaborator_can_invite,omitempty"`
// 	CollaboratorCanShare    *bool `json:"collaborator_can_share,omitempty"`
// 	NotifyOnNewAsset        *bool `json:"notify_on_new_asset,omitempty"`
// 	NotifyOnNewCollaborator *bool `json:"notify_on_new_collaborator,omitempty"`
// 	NotifyOnNewComment      *bool `json:"notify_on_new_comment,omitempty"`
// 	NotifyOnUpdatedLabel    *bool `json:"notify_on_updated_label,omitempty"`
// 	NotifySlack             *bool `json:"notify_slack,omitempty"`
// }

// // RequiredTranscodes defines model for RequiredTranscodes.
// type RequiredTranscodes struct {
// 	Cover          *bool     `json:"cover,omitempty"`
// 	Finalized      *[]string `json:"finalized,omitempty"`
// 	H2641080Best   *bool     `json:"h264_1080_best,omitempty"`
// 	H2642160       *bool     `json:"h264_2160,omitempty"`
// 	H264360        *bool     `json:"h264_360,omitempty"`
// 	H264540        *bool     `json:"h264_540,omitempty"`
// 	H264720        *bool     `json:"h264_720,omitempty"`
// 	ImageFull      *bool     `json:"image_full,omitempty"`
// 	ImageHigh      *bool     `json:"image_high,omitempty"`
// 	PageProxy      *bool     `json:"page_proxy,omitempty"`
// 	Thumb          *bool     `json:"thumb,omitempty"`
// 	Thumb540       *bool     `json:"thumb_540,omitempty"`
// 	ThumbOrigAr540 *bool     `json:"thumb_orig_ar_540,omitempty"`
// 	ThumbScrub     *bool     `json:"thumb_scrub,omitempty"`
// }

// // ReviewLink defines model for ReviewLink.
// type ReviewLink struct {
// 	AccessControl      *ShareableEntityAccessControl `json:"access_control,omitempty"`
// 	AllowApprovals     *bool                         `json:"allow_approvals,omitempty"`
// 	AvailableFeatures  *map[string]interface{}       `json:"available_features,omitempty"`
// 	BundleCount        *int                          `json:"bundle_count,omitempty"`
// 	CurrentVersionOnly *bool                         `json:"current_version_only,omitempty"`
// 	DeletedAt          *time.Time                    `json:"deleted_at,omitempty"`
// 	EnableComments     *bool                         `json:"enable_comments,omitempty"`
// 	EnableDownloading  *bool                         `json:"enable_downloading,omitempty"`
// 	ExpiresAt          *time.Time                    `json:"expires_at,omitempty"`
// 	FolderItemCount    *int                          `json:"folder_item_count,omitempty"`
// 	HasPassword        *bool                         `json:"has_password,omitempty"`
// 	Id                 *string                       `json:"id,omitempty"`
// 	InsertedAt         *time.Time                    `json:"inserted_at,omitempty"`
// 	IsActive           *bool                         `json:"is_active,omitempty"`
// 	IsAutoplay         *bool                         `json:"is_autoplay,omitempty"`
// 	ItemCount          *int                          `json:"item_count,omitempty"`
// 	Items              *[]ReviewLinkItem             `json:"items,omitempty"`
// 	Name               *string                       `json:"name,omitempty"`
// 	NotifyOnView       *bool                         `json:"notify_on_view,omitempty"`
// 	Owner              *User                         `json:"owner,omitempty"`
// 	OwnerId            *string                       `json:"owner_id,omitempty"`
// 	Password           *string                       `json:"password,omitempty"`
// 	Project            *Project                      `json:"project,omitempty"`
// 	ProjectId          *string                       `json:"project_id,omitempty"`
// 	ReviewerCount      *int                          `json:"reviewer_count,omitempty"`
// 	ShortUrl           *string                       `json:"short_url,omitempty"`
// 	Team               *Team                         `json:"team,omitempty"`
// 	UpdatedAt          *time.Time                    `json:"updated_at,omitempty"`
// 	ViewCount          *int                          `json:"view_count,omitempty"`
// }

// // ReviewLinkItem defines model for ReviewLinkItem.
// type ReviewLinkItem struct {
// 	Asset        *Asset      `json:"asset,omitempty"`
// 	AssetId      *string     `json:"asset_id,omitempty"`
// 	DeletedAt    *time.Time  `json:"deleted_at,omitempty"`
// 	Index        *int        `json:"index,omitempty"`
// 	InsertedAt   *time.Time  `json:"inserted_at,omitempty"`
// 	ReviewLink   *ReviewLink `json:"review_link,omitempty"`
// 	ReviewLinkId *string     `json:"review_link_id,omitempty"`
// 	UpdatedAt    *time.Time  `json:"updated_at,omitempty"`
// }

// // SessionWatermarkBlock defines model for SessionWatermarkBlock.
// type SessionWatermarkBlock struct {
// 	Alpha                  *float32                     `json:"alpha,omitempty"`
// 	DataPoints             *[]SessionWatermarkDataPoint `json:"data_points,omitempty"`
// 	FontSize               *string                      `json:"font_size,omitempty"`
// 	Name                   *string                      `json:"name,omitempty"`
// 	Position               *string                      `json:"position,omitempty"`
// 	PositionReferencePoint *string                      `json:"position_reference_point,omitempty"`
// 	PositionX              *int                         `json:"position_x,omitempty"`
// 	PositionY              *int                         `json:"position_y,omitempty"`
// 	ScrollText             *string                      `json:"scroll_text,omitempty"`
// 	TextAlignment          *string                      `json:"text_alignment,omitempty"`
// 	TextColor              *string                      `json:"text_color,omitempty"`
// 	TextShadow             *bool                        `json:"text_shadow,omitempty"`
// }

// // SessionWatermarkDataPoint defines model for SessionWatermarkDataPoint.
// type SessionWatermarkDataPoint struct {
// 	Order *int    `json:"order,omitempty"`
// 	Type  *string `json:"type,omitempty"`
// 	Value *string `json:"value,omitempty"`
// }

// // SessionWatermarkTemplate defines model for SessionWatermarkTemplate.
// type SessionWatermarkTemplate struct {
// 	AccountId       *string                  `json:"account_id,omitempty"`
// 	AppDefault      *bool                    `json:"app_default,omitempty"`
// 	CreatorId       *string                  `json:"creator_id,omitempty"`
// 	Id              *string                  `json:"id,omitempty"`
// 	Name            *string                  `json:"name,omitempty"`
// 	WatermarkBlocks *[]SessionWatermarkBlock `json:"watermark_blocks,omitempty"`
// }

// // ShareableEntityAccessControl defines model for ShareableEntityAccessControl.
// type ShareableEntityAccessControl struct {
// 	InviteOnly *bool `json:"invite_only,omitempty"`
// }

// // Subscription defines model for Subscription.
// type Subscription struct {
// 	AccountId                 *string    `json:"account_id,omitempty"`
// 	ArchivedStorageLimit      *int       `json:"archived_storage_limit,omitempty"`
// 	Balance                   *int       `json:"balance,omitempty"`
// 	CancellationOption        *string    `json:"cancellation_option,omitempty"`
// 	CancellationReason        *string    `json:"cancellation_reason,omitempty"`
// 	CancelledAt               *time.Time `json:"cancelled_at,omitempty"`
// 	DeletedAt                 *time.Time `json:"deleted_at,omitempty"`
// 	Id                        *string    `json:"id,omitempty"`
// 	InsertedAt                *time.Time `json:"inserted_at,omitempty"`
// 	LastPaymentAt             *time.Time `json:"last_payment_at,omitempty"`
// 	MemberLimit               *int       `json:"member_limit,omitempty"`
// 	NextBillAt                *time.Time `json:"next_bill_at,omitempty"`
// 	OnTrial                   *bool      `json:"on_trial,omitempty"`
// 	Plan                      *Plan      `json:"plan,omitempty"`
// 	PlanId                    *string    `json:"plan_id,omitempty"`
// 	PromotionExpiresAt        *time.Time `json:"promotion_expires_at,omitempty"`
// 	PromotionId               *string    `json:"promotion_id,omitempty"`
// 	RequiresAutoscaling       *bool      `json:"requires_autoscaling,omitempty"`
// 	StorageLimit              *int       `json:"storage_limit,omitempty"`
// 	SubscriptionEndAt         *time.Time `json:"subscription_end_at,omitempty"`
// 	TotalArchivedStorageLimit *int       `json:"total_archived_storage_limit,omitempty"`
// 	TotalLifetimeFileLimit    *int       `json:"total_lifetime_file_limit,omitempty"`
// 	TotalMemberLimit          *int       `json:"total_member_limit,omitempty"`
// 	TotalProjectLimit         *int       `json:"total_project_limit,omitempty"`
// 	TotalStorageLimit         *int       `json:"total_storage_limit,omitempty"`
// 	TotalUserLimit            *int       `json:"total_user_limit,omitempty"`
// 	UpdatedAt                 *time.Time `json:"updated_at,omitempty"`
// 	UserLimit                 *int       `json:"user_limit,omitempty"`
// }

// // Team defines model for Team.
// type Team struct {
// 	Access                            *string                     `json:"access,omitempty"`
// 	Account                           *Account                    `json:"account,omitempty"`
// 	AccountId                         *string                     `json:"account_id,omitempty"`
// 	AdminOnlyActions                  *AdminOnlyAction            `json:"admin_only_actions,omitempty"`
// 	ArchivedStorage                   *int                        `json:"archived_storage,omitempty"`
// 	AssetLifecyclePolicy              *int                        `json:"asset_lifecycle_policy,omitempty"`
// 	BackgroundColor                   *string                     `json:"background_color,omitempty"`
// 	Bio                               *string                     `json:"bio,omitempty"`
// 	CollaboratorCount                 *int                        `json:"collaborator_count,omitempty"`
// 	Color                             *string                     `json:"color,omitempty"`
// 	CreatorId                         *string                     `json:"creator_id,omitempty"`
// 	DarkTheme                         *bool                       `json:"dark_theme,omitempty"`
// 	DefaultBackgroundColor            *string                     `json:"default_background_color,omitempty"`
// 	DefaultColor                      *string                     `json:"default_color,omitempty"`
// 	DefaultFontColor                  *string                     `json:"default_font_color,omitempty"`
// 	DefaultSessionWatermarkTemplate   *SessionWatermarkTemplate   `json:"default_session_watermark_template,omitempty"`
// 	DefaultSessionWatermarkTemplateId *string                     `json:"default_session_watermark_template_id,omitempty"`
// 	DeletedAt                         *time.Time                  `json:"deleted_at,omitempty"`
// 	DisableSbwmInternally             *bool                       `json:"disable_sbwm_internally,omitempty"`
// 	Duration                          *int                        `json:"duration,omitempty"`
// 	EmailBranding                     *EmailBranding              `json:"email_branding,omitempty"`
// 	FileCount                         *int                        `json:"file_count,omitempty"`
// 	FolderCount                       *int                        `json:"folder_count,omitempty"`
// 	FontColor                         *string                     `json:"font_color,omitempty"`
// 	Frames                            *int                        `json:"frames,omitempty"`
// 	Id                                *string                     `json:"id,omitempty"`
// 	Image128                          *string                     `json:"image_128,omitempty"`
// 	Image256                          *string                     `json:"image_256,omitempty"`
// 	Image32                           *string                     `json:"image_32,omitempty"`
// 	Image64                           *string                     `json:"image_64,omitempty"`
// 	InsertedAt                        *time.Time                  `json:"inserted_at,omitempty"`
// 	Link                              *string                     `json:"link,omitempty"`
// 	Location                          *string                     `json:"location,omitempty"`
// 	MemberCount                       *int                        `json:"member_count,omitempty"`
// 	MemberLimit                       *int                        `json:"member_limit,omitempty"`
// 	Name                              *string                     `json:"name,omitempty"`
// 	ProjectCount                      *int                        `json:"project_count,omitempty"`
// 	SessionWatermarkTemplates         *[]SessionWatermarkTemplate `json:"session_watermark_templates,omitempty"`
// 	SlackWebhook                      *map[string]interface{}     `json:"slack_webhook,omitempty"`
// 	Solo                              *bool                       `json:"solo,omitempty"`
// 	Storage                           *int                        `json:"storage,omitempty"`
// 	StorageLimit                      *int                        `json:"storage_limit,omitempty"`
// 	TeamImage                         *string                     `json:"team_image,omitempty"`
// 	UpdatedAt                         *time.Time                  `json:"updated_at,omitempty"`
// 	UploadUrl                         *string                     `json:"upload_url,omitempty"`
// 	UserRole                          *map[string]interface{}     `json:"user_role,omitempty"`
// 	Watermark                         *Watermark                  `json:"watermark,omitempty"`
// }

// // User defines model for User.
// type User struct {
// 	AccountId *string              `json:"account_id,omitempty"`
// 	Email     *openapi_types.Email `json:"email,omitempty"`
// 	Id        *string              `json:"id,omitempty"`
// 	Name      *string              `json:"name,omitempty"`
// }

// // UserPermissions defines model for UserPermissions.
// type UserPermissions struct {
// 	CanDownload                       *bool `json:"can_download,omitempty"`
// 	CanModifyTemplate                 *bool `json:"can_modify_template,omitempty"`
// 	CanPublicSharePresentation        *bool `json:"can_public_share_presentation,omitempty"`
// 	CanPublicShareReviewLink          *bool `json:"can_public_share_review_link,omitempty"`
// 	CanShareDownloadablePresentation  *bool `json:"can_share_downloadable_presentation,omitempty"`
// 	CanShareDownloadableReviewLink    *bool `json:"can_share_downloadable_review_link,omitempty"`
// 	CanShareUnwatermarkedPresentation *bool `json:"can_share_unwatermarked_presentation,omitempty"`
// 	CanShareUnwatermarkedReviewLink   *bool `json:"can_share_unwatermarked_review_link,omitempty"`
// }

// // Watermark defines model for Watermark.
// type Watermark struct {
// 	Image *WatermarkImage `json:"image,omitempty"`
// 	Text  *WatermarkText  `json:"text,omitempty"`
// }

// // WatermarkImage defines model for WatermarkImage.
// type WatermarkImage struct {
// 	Alpha    *float32 `json:"alpha,omitempty"`
// 	Image    *Image   `json:"image,omitempty"`
// 	Position *string  `json:"position,omitempty"`
// }

// // WatermarkText defines model for WatermarkText.
// type WatermarkText struct {
// 	Alpha    *float32  `json:"alpha,omitempty"`
// 	Lines    *[]string `json:"lines,omitempty"`
// 	Position *string   `json:"position,omitempty"`
// }

// // Webhook defines model for Webhook.
// type Webhook struct {
// 	AccountId  *string    `json:"account_id,omitempty"`
// 	Active     *bool      `json:"active,omitempty"`
// 	AppId      *string    `json:"app_id,omitempty"`
// 	DeletedAt  *time.Time `json:"deleted_at,omitempty"`
// 	Events     *[]Events  `json:"events,omitempty"`
// 	Id         *string    `json:"id,omitempty"`
// 	InsertedAt *time.Time `json:"inserted_at,omitempty"`
// 	Name       *string    `json:"name,omitempty"`
// 	ProjectId  *string    `json:"project_id,omitempty"`
// 	Secret     *string    `json:"secret,omitempty"`
// 	Team       *Team      `json:"team,omitempty"`
// 	TeamId     *string    `json:"team_id,omitempty"`
// 	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
// 	Url        *string    `json:"url,omitempty"`
// }

// // AccountMembershipResponse defines model for AccountMembershipResponse.
// type AccountMembershipResponse AccountMembership

// // AccountResponse defines model for AccountResponse.
// type AccountResponse Account

// // AccountsResponse defines model for AccountsResponse.
// type AccountsResponse []Account

// // ActionResponse defines model for ActionResponse.
// type ActionResponse Action

// // ActionsResponse defines model for ActionsResponse.
// type ActionsResponse []Action

// // AssetAudioResponse defines model for AssetAudioResponse.
// type AssetAudioResponse AssetAudio

// // AssetResponse defines model for AssetResponse.
// type AssetResponse Asset

// // AssetSubtitleResponse defines model for AssetSubtitleResponse.
// type AssetSubtitleResponse AssetSubtitle

// // AssetsResponse defines model for AssetsResponse.
// type AssetsResponse []Asset

// // AuditsResponse defines model for AuditsResponse.
// type AuditsResponse []Audit

// // BatchAssetCopyResponse defines model for BatchAssetCopyResponse.
// type BatchAssetCopyResponse struct {
// 	Error *map[string]interface{} `json:"error,omitempty"`
// }

// // BatchAssetDeleteResponse defines model for BatchAssetDeleteResponse.
// type BatchAssetDeleteResponse struct {
// 	Error *map[string]interface{} `json:"error,omitempty"`
// }

// // BatchCollaboratorCreateResponse defines model for BatchCollaboratorCreateResponse.
// type BatchCollaboratorCreateResponse struct {
// 	Error *map[string]interface{} `json:"error,omitempty"`
// }

// // BatchCollaboratorDeleteResponse defines model for BatchCollaboratorDeleteResponse.
// type BatchCollaboratorDeleteResponse struct {
// 	Error *map[string]interface{} `json:"error,omitempty"`
// }

// // CollaboratorResponse defines model for CollaboratorResponse.
// type CollaboratorResponse Collaborator

// // CommentImpressionsResponse defines model for CommentImpressionsResponse.
// type CommentImpressionsResponse []CommentImpression

// // CommentResponse defines model for CommentResponse.
// type CommentResponse Comment

// // CommentsResponse defines model for CommentsResponse.
// type CommentsResponse []Comment

// // InstallationResponse defines model for InstallationResponse.
// type InstallationResponse Installation

// // NotFound defines model for NotFound.
// type NotFound HTTPError

// // PresentationResponse defines model for PresentationResponse.
// type PresentationResponse Presentation

// // PresentationsResponse defines model for PresentationsResponse.
// type PresentationsResponse []Presentation

// // ProjectMembershipResonse defines model for ProjectMembershipResonse.
// type ProjectMembershipResonse ProjectMembership

// // ProjectResponse defines model for ProjectResponse.
// type ProjectResponse Project

// // ProjectsResponse defines model for ProjectsResponse.
// type ProjectsResponse []Project

// // ReviewLinkItemsResponse defines model for ReviewLinkItemsResponse.
// type ReviewLinkItemsResponse []ReviewLinkItem

// // ReviewLinkResponse defines model for ReviewLinkResponse.
// type ReviewLinkResponse ReviewLink

// // ReviewLinksResponse defines model for ReviewLinksResponse.
// type ReviewLinksResponse []ReviewLink

// // TeamMemberResonse defines model for TeamMemberResonse.
// type TeamMemberResonse struct {
// 	Role   *string `json:"role,omitempty"`
// 	UserId *string `json:"user_id,omitempty"`
// }

// // TeamMembershipResonse defines model for TeamMembershipResonse.
// type TeamMembershipResonse struct {
// 	Role *string `json:"role,omitempty"`
// }

// // TeamResponse defines model for TeamResponse.
// type TeamResponse Team

// // TeamsResponse defines model for TeamsResponse.
// type TeamsResponse []Team

// // Unauthorized defines model for Unauthorized.
// type Unauthorized HTTPError

// // UserResponse defines model for UserResponse.
// type UserResponse User

// // WebhookResponse defines model for WebhookResponse.
// type WebhookResponse Webhook

// // WebhooksResponse defines model for WebhooksResponse.
// type WebhooksResponse []Webhook

// // ActionRequest defines model for ActionRequest.
// type ActionRequest struct {
// 	AllowCollaborators *bool `json:"allow_collaborators,omitempty"`

// 	// Description of the custom Action
// 	Description string `json:"description"`

// 	// Arbitrary event name to include in custom Action webhook payloads
// 	Event string `json:"event"`

// 	// Any associations to include in the response
// 	Include *string `json:"include,omitempty"`

// 	// Name of the custom Action
// 	Name string `json:"name"`

// 	// HTTPS endpoint to deliver Action events to
// 	Url string `json:"url"`
// }

// // AssetCopyRequest defines model for AssetCopyRequest.
// type AssetCopyRequest struct {

// 	// Identifier of the asset to be copied
// 	Id string `json:"id"`
// }

// // AssetCreateRequest defines model for AssetCreateRequest.
// type AssetCreateRequest struct {

// 	// Brief description of the Asset
// 	Description *string `json:"description,omitempty"`

// 	// The file size in bytes
// 	Filesize int     `json:"filesize"`
// 	Filetype *string `json:"filetype,omitempty"`

// 	// Name of the Asset
// 	Name string `json:"name"`

// 	// Custom key-value data
// 	Properties *map[string]interface{} `json:"properties,omitempty"`
// 	Source     *AssetSource            `json:"source,omitempty"`
// 	Type       string                  `json:"type"`
// }

// // AssetSearchRequest defines model for AssetSearchRequest.
// type AssetSearchRequest AssetSearch

// // AssetUpdateRequest defines model for AssetUpdateRequest.
// type AssetUpdateRequest struct {

// 	// Brief description of the Asset
// 	Description *string `json:"description,omitempty"`

// 	// Name of the Asset
// 	Name string `json:"name"`

// 	// Custom key-value data
// 	Properties *map[string]interface{} `json:"properties,omitempty"`
// }

// // BatchAssetCopyRequest defines model for BatchAssetCopyRequest.
// type BatchAssetCopyRequest struct {
// 	Batch *[]struct {

// 		// Identifier of an asset to be copied
// 		Id int `json:"id"`
// 	} `json:"batch,omitempty"`
// 	CopyComments *string `json:"copy_comments,omitempty"`
// }

// // BatchCollaboratorCreateRequest defines model for BatchCollaboratorCreateRequest.
// type BatchCollaboratorCreateRequest BatchInviteParams

// // CollaboratorRequest defines model for CollaboratorRequest.
// type CollaboratorRequest struct {
// 	Email *string `json:"email,omitempty"`
// }

// // CommentRequest defines model for CommentRequest.
// type CommentRequest struct {

// 	// Serialized list of geometry and/or drawing data.
// 	Annotation *string `json:"annotation,omitempty"`

// 	// Used to produce range-based comments, this is the duration measured in frames.
// 	Duration *int `json:"duration,omitempty"`

// 	// Page number for a comment (documents only).
// 	Page *int `json:"page,omitempty"`

// 	// Pitch measurement for the comment (360deg video only).
// 	Pitch *int `json:"pitch,omitempty"`

// 	// The body of the comment.
// 	Text *string `json:"text,omitempty"`

// 	// Timestamp for the comment, in frames, starting at 0.
// 	Timestamp *int `json:"timestamp,omitempty"`

// 	// Yaw measurement for the comment (360deg video only).
// 	Yaw *int `json:"yaw,omitempty"`
// }

// // LibrarySearchRequest defines model for LibrarySearchRequest.
// type LibrarySearchRequest LibrarySearch

// // PresentationCreateRequest defines model for PresentationCreateRequest.
// type PresentationCreateRequest struct {
// 	AccessControl     *ShareableEntityAccessControl `json:"access_control,omitempty"`
// 	AssetId           string                        `json:"asset_id"`
// 	Autoplay          *bool                         `json:"autoplay,omitempty"`
// 	BackgroundColor   *string                       `json:"background_color,omitempty"`
// 	CanDownload       *bool                         `json:"can_download,omitempty"`
// 	Color             *string                       `json:"color,omitempty"`
// 	DeletedAt         *time.Time                    `json:"deleted_at,omitempty"`
// 	Description       *string                       `json:"description,omitempty"`
// 	Enabled           *bool                         `json:"enabled,omitempty"`
// 	ExpiresAt         *time.Time                    `json:"expires_at,omitempty"`
// 	Format            *string                       `json:"format,omitempty"`
// 	IncludeExt        *bool                         `json:"include_ext,omitempty"`
// 	IncludeUploadDate *bool                         `json:"include_upload_date,omitempty"`
// 	Layout            *string                       `json:"layout,omitempty"`
// 	Name              *string                       `json:"name,omitempty"`
// 	OwnerId           string                        `json:"owner_id"`
// 	Password          *string                       `json:"password,omitempty"`
// 	ProjectId         string                        `json:"project_id"`
// 	Secure            *bool                         `json:"secure,omitempty"`
// 	Style             *string                       `json:"style,omitempty"`
// 	TextColor         *string                       `json:"text_color,omitempty"`
// 	Title             *string                       `json:"title,omitempty"`
// }

// // PresentationUpdateRequest defines model for PresentationUpdateRequest.
// type PresentationUpdateRequest struct {
// 	AccessControl     *ShareableEntityAccessControl `json:"access_control,omitempty"`
// 	AssetId           *string                       `json:"asset_id,omitempty"`
// 	Autoplay          *bool                         `json:"autoplay,omitempty"`
// 	BackgroundColor   *string                       `json:"background_color,omitempty"`
// 	CanDownload       *bool                         `json:"can_download,omitempty"`
// 	Color             *string                       `json:"color,omitempty"`
// 	DeletedAt         *time.Time                    `json:"deleted_at,omitempty"`
// 	Description       *string                       `json:"description,omitempty"`
// 	Enabled           *bool                         `json:"enabled,omitempty"`
// 	ExpiresAt         *time.Time                    `json:"expires_at,omitempty"`
// 	Format            *string                       `json:"format,omitempty"`
// 	IncludeExt        *bool                         `json:"include_ext,omitempty"`
// 	IncludeUploadDate *bool                         `json:"include_upload_date,omitempty"`
// 	Layout            *string                       `json:"layout,omitempty"`
// 	Name              *string                       `json:"name,omitempty"`
// 	OwnerId           *string                       `json:"owner_id,omitempty"`
// 	Password          *string                       `json:"password,omitempty"`
// 	ProjectId         *string                       `json:"project_id,omitempty"`
// 	Secure            *bool                         `json:"secure,omitempty"`
// 	Style             *string                       `json:"style,omitempty"`
// 	TextColor         *string                       `json:"text_color,omitempty"`
// 	Title             *string                       `json:"title,omitempty"`
// }

// // ProjectRequest defines model for ProjectRequest.
// type ProjectRequest struct {

// 	// Project name
// 	Name *string `json:"name,omitempty"`

// 	// If true, the project is private to the creating user
// 	Private            *bool               `json:"private,omitempty"`
// 	ProjectPreferences *ProjectPreferences `json:"project_preferences,omitempty"`
// }

// // ReviewLinkCreateRequest defines model for ReviewLinkCreateRequest.
// type ReviewLinkCreateRequest struct {
// 	AccessControl      *ShareableEntityAccessControl `json:"access_control,omitempty"`
// 	AllowApprovals     *bool                         `json:"allow_approvals,omitempty"`
// 	CurrentVersionOnly *bool                         `json:"current_version_only,omitempty"`
// 	DeletedAt          *time.Time                    `json:"deleted_at,omitempty"`
// 	EnableDownloading  *bool                         `json:"enable_downloading,omitempty"`
// 	ExpiresAt          *time.Time                    `json:"expires_at,omitempty"`
// 	IsActive           *bool                         `json:"is_active,omitempty"`
// 	Name               string                        `json:"name"`
// 	NotifyOnView       *bool                         `json:"notify_on_view,omitempty"`
// 	OwnerId            string                        `json:"owner_id"`
// 	Password           *string                       `json:"password,omitempty"`
// 	ProjectId          string                        `json:"project_id"`
// 	Secure             *bool                         `json:"secure,omitempty"`
// 	ViewCount          *int                          `json:"view_count,omitempty"`
// }

// // ReviewLinkItemCreateRequest defines model for ReviewLinkItemCreateRequest.
// type ReviewLinkItemCreateRequest struct {
// 	AssetIds *[]string `json:"asset_ids,omitempty"`
// }

// // ReviewLinkUpdateRequest defines model for ReviewLinkUpdateRequest.
// type ReviewLinkUpdateRequest struct {
// 	AccessControl      *ShareableEntityAccessControl `json:"access_control,omitempty"`
// 	AllowApprovals     *bool                         `json:"allow_approvals,omitempty"`
// 	CurrentVersionOnly *bool                         `json:"current_version_only,omitempty"`
// 	DeletedAt          *time.Time                    `json:"deleted_at,omitempty"`
// 	EnableDownloading  *bool                         `json:"enable_downloading,omitempty"`
// 	ExpiresAt          *time.Time                    `json:"expires_at,omitempty"`
// 	IsActive           *bool                         `json:"is_active,omitempty"`
// 	Name               *string                       `json:"name,omitempty"`
// 	NotifyOnView       *bool                         `json:"notify_on_view,omitempty"`
// 	OwnerId            *string                       `json:"owner_id,omitempty"`
// 	Password           *string                       `json:"password,omitempty"`
// 	ProjectId          *string                       `json:"project_id,omitempty"`
// 	Secure             *bool                         `json:"secure,omitempty"`
// 	ViewCount          *int                          `json:"view_count,omitempty"`
// }

// // TeamMemberRequest defines model for TeamMemberRequest.
// type TeamMemberRequest struct {
// 	Email  *string `json:"email,omitempty"`
// 	Role   *string `json:"role,omitempty"`
// 	UserId *string `json:"user_id,omitempty"`
// }

// // TeamRequest defines model for TeamRequest.
// type TeamRequest struct {
// 	Access                            *string                 `json:"access,omitempty"`
// 	AccountId                         *string                 `json:"account_id,omitempty"`
// 	AdminOnlyActions                  *AdminOnlyAction        `json:"admin_only_actions,omitempty"`
// 	BackgroundColor                   *string                 `json:"background_color,omitempty"`
// 	Bio                               *string                 `json:"bio,omitempty"`
// 	Color                             *string                 `json:"color,omitempty"`
// 	Colors                            *[]string               `json:"colors,omitempty"`
// 	DarkTheme                         *bool                   `json:"dark_theme,omitempty"`
// 	DefaultSessionWatermarkTemplateId *string                 `json:"default_session_watermark_template_id,omitempty"`
// 	EmailBranding                     *EmailBranding          `json:"email_branding,omitempty"`
// 	FontColor                         *string                 `json:"font_color,omitempty"`
// 	Image                             *Image                  `json:"image,omitempty"`
// 	Link                              *string                 `json:"link,omitempty"`
// 	Location                          *string                 `json:"location,omitempty"`
// 	MemberLimit                       *int                    `json:"member_limit,omitempty"`
// 	Name                              *string                 `json:"name,omitempty"`
// 	SlackWebhook                      *map[string]interface{} `json:"slack_webhook,omitempty"`
// 	Solo                              *bool                   `json:"solo,omitempty"`
// 	StorageLimit                      *int                    `json:"storage_limit,omitempty"`
// 	Watermark                         *Watermark              `json:"watermark,omitempty"`
// }

// // WebhookRequest defines model for WebhookRequest.
// type WebhookRequest struct {
// 	Events *[]string `json:"events,omitempty"`

// 	// Name of the Webhook
// 	Name string `json:"name"`

// 	// HTTPS endpoint to delivery events to
// 	Url string `json:"url"`
// }

// // GetActionsByAccountParams defines parameters for GetActionsByAccount.
// type GetActionsByAccountParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // GetTeamsByAccountParams defines parameters for GetTeamsByAccount.
// type GetTeamsByAccountParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // GetAssetsParams defines parameters for GetAssets.
// type GetAssetsParams struct {
// 	IncludeDeleted *bool `json:"include_deleted,omitempty"`
// }

// // GetCommentsParams defines parameters for GetComments.
// type GetCommentsParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // AddVersionToAssetJSONBody defines parameters for AddVersionToAsset.
// type AddVersionToAssetJSONBody struct {
// 	NextAssetId string `json:"next_asset_id"`
// }

// // GetAssetParams defines parameters for GetAsset.
// type GetAssetParams struct {
// 	IncludeDeleted *bool        `json:"include_deleted,omitempty"`
// 	Type           *interface{} `json:"type,omitempty"`
// }

// // GetCommentImpressionsParams defines parameters for GetCommentImpressions.
// type GetCommentImpressionsParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // GetRepliesParams defines parameters for GetReplies.
// type GetRepliesParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // GetCommentParams defines parameters for GetComment.
// type GetCommentParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // GetSharedProjectsParams defines parameters for GetSharedProjects.
// type GetSharedProjectsParams struct {
// 	Filter *struct {

// 		// Filter based on project account
// 		AccountId *string `json:"account_id,omitempty"`

// 		// Filter based on project archival status
// 		Archived *bool `json:"archived,omitempty"`

// 		// Filter based on project.name
// 		Name *string `json:"name,omitempty"`
// 	} `json:"filter,omitempty"`

// 	// Page of the results to return
// 	Page *int `json:"page,omitempty"`

// 	// Number of results to include in a results page
// 	PageSize *int `json:"page_size,omitempty"`
// }

// // GetProjectMembershipParams defines parameters for GetProjectMembership.
// type GetProjectMembershipParams struct {
// 	UserId *string `json:"user_id,omitempty"`
// }

// // ReviewLinkGetParams defines parameters for ReviewLinkGet.
// type ReviewLinkGetParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // ReviewLinkItemsListParams defines parameters for ReviewLinkItemsList.
// type ReviewLinkItemsListParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // AssetSearchGetParams defines parameters for AssetSearchGet.
// type AssetSearchGetParams struct {
// 	AccountId *string `json:"account_id,omitempty"`

// 	// Custom fields to filter records on (currently only for assets)
// 	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

// 	// Custom ES filters to apply to your query
// 	Filter  *map[string]interface{} `json:"filter,omitempty"`
// 	Include *string                 `json:"include,omitempty"`

// 	// Flag to include soft-deleted records in results
// 	IncludeDeleted *bool `json:"include_deleted,omitempty"`

// 	// Additional request options
// 	Opts *map[string]interface{} `json:"opts,omitempty"`

// 	// The page to retrieve
// 	Page *int `json:"page,omitempty"`

// 	// The number of results to include in the page
// 	PageSize   *int                    `json:"page_size,omitempty"`
// 	ProjectId  *string                 `json:"project_id,omitempty"`
// 	Properties *map[string]interface{} `json:"properties,omitempty"`

// 	// Search text
// 	Q *string `json:"q,omitempty"`

// 	// Search text
// 	Query          *string `json:"query,omitempty"`
// 	SharedProjects *bool   `json:"shared_projects,omitempty"`

// 	// Sorting parameters
// 	Sort   *string      `json:"sort,omitempty"`
// 	TeamId *interface{} `json:"team_id,omitempty"`
// 	Type   *string      `json:"type,omitempty"`
// }

// // LibrarySearchGetParams defines parameters for LibrarySearchGet.
// type LibrarySearchGetParams struct {
// 	AccountId *string `json:"account_id,omitempty"`

// 	// Custom fields to filter records on (currently only for assets)
// 	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

// 	// Custom ES filters to apply to your query
// 	Filter *map[string]interface{} `json:"filter,omitempty"`

// 	// Flag to include soft-deleted records in results
// 	IncludeDeleted *bool `json:"include_deleted,omitempty"`

// 	// Additional request options
// 	Opts *map[string]interface{} `json:"opts,omitempty"`

// 	// The page to retrieve
// 	Page *int `json:"page,omitempty"`

// 	// The number of results to include in the page
// 	PageSize *int `json:"page_size,omitempty"`

// 	// Search text
// 	Q *string `json:"q,omitempty"`

// 	// Search text
// 	Query *string `json:"query,omitempty"`

// 	// Sorting parameters
// 	Sort *string `json:"sort,omitempty"`
// }

// // GetTeamParams defines parameters for GetTeam.
// type GetTeamParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // GetActionsByTeamParams defines parameters for GetActionsByTeam.
// type GetActionsByTeamParams struct {
// 	Include *string `json:"include,omitempty"`
// }

// // CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
// type CreateTeamJSONRequestBody TeamRequest

// // UpdateActionJSONRequestBody defines body for UpdateAction for application/json ContentType.
// type UpdateActionJSONRequestBody ActionRequest

// // CreateAssetJSONRequestBody defines body for CreateAsset for application/json ContentType.
// type CreateAssetJSONRequestBody AssetCreateRequest

// // CreateCommentJSONRequestBody defines body for CreateComment for application/json ContentType.
// type CreateCommentJSONRequestBody CommentRequest

// // CopyAssetJSONRequestBody defines body for CopyAsset for application/json ContentType.
// type CopyAssetJSONRequestBody AssetCopyRequest

// // CreatePresentationJSONRequestBody defines body for CreatePresentation for application/json ContentType.
// type CreatePresentationJSONRequestBody PresentationCreateRequest

// // AddVersionToAssetJSONRequestBody defines body for AddVersionToAsset for application/json ContentType.
// type AddVersionToAssetJSONRequestBody AddVersionToAssetJSONBody

// // UpdateAssetJSONRequestBody defines body for UpdateAsset for application/json ContentType.
// type UpdateAssetJSONRequestBody AssetUpdateRequest

// // BatchCopyAssetJSONRequestBody defines body for BatchCopyAsset for application/json ContentType.
// type BatchCopyAssetJSONRequestBody BatchAssetCopyRequest

// // BatchCreateCollaboratorsJSONRequestBody defines body for BatchCreateCollaborators for application/json ContentType.
// type BatchCreateCollaboratorsJSONRequestBody BatchCollaboratorCreateRequest

// // CreateReplyJSONRequestBody defines body for CreateReply for application/json ContentType.
// type CreateReplyJSONRequestBody CommentRequest

// // UpdateCommentJSONRequestBody defines body for UpdateComment for application/json ContentType.
// type UpdateCommentJSONRequestBody CommentRequest

// // UpdateWebhookJSONRequestBody defines body for UpdateWebhook for application/json ContentType.
// type UpdateWebhookJSONRequestBody WebhookRequest

// // UpdatePresentationJSONRequestBody defines body for UpdatePresentation for application/json ContentType.
// type UpdatePresentationJSONRequestBody PresentationUpdateRequest

// // UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
// type UpdateProjectJSONRequestBody ProjectRequest

// // AddCollaboratorToProjectJSONRequestBody defines body for AddCollaboratorToProject for application/json ContentType.
// type AddCollaboratorToProjectJSONRequestBody CollaboratorRequest

// // ReviewLinkCreateJSONRequestBody defines body for ReviewLinkCreate for application/json ContentType.
// type ReviewLinkCreateJSONRequestBody ReviewLinkCreateRequest

// // ReviewLinkUpdateJSONRequestBody defines body for ReviewLinkUpdate for application/json ContentType.
// type ReviewLinkUpdateJSONRequestBody ReviewLinkUpdateRequest

// // ReviewLinkItemCreateJSONRequestBody defines body for ReviewLinkItemCreate for application/json ContentType.
// type ReviewLinkItemCreateJSONRequestBody ReviewLinkItemCreateRequest

// // AssetSearchPostJSONRequestBody defines body for AssetSearchPost for application/json ContentType.
// type AssetSearchPostJSONRequestBody AssetSearchRequest

// // LibrarySearchPostJSONRequestBody defines body for LibrarySearchPost for application/json ContentType.
// type LibrarySearchPostJSONRequestBody LibrarySearchRequest

// // CreateActionForTeamJSONRequestBody defines body for CreateActionForTeam for application/json ContentType.
// type CreateActionForTeamJSONRequestBody ActionRequest

// // CreateWebhookForTeamJSONRequestBody defines body for CreateWebhookForTeam for application/json ContentType.
// type CreateWebhookForTeamJSONRequestBody WebhookRequest

// // AddTeamMemberJSONRequestBody defines body for AddTeamMember for application/json ContentType.
// type AddTeamMemberJSONRequestBody TeamMemberRequest

// // CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
// type CreateProjectJSONRequestBody ProjectRequest
